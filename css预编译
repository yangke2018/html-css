参考资料：
https://blog.csdn.net/joehonv/article/details/81699572
目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性

一、基本语法
  Less & SCSS：
  .box {
    display: block;
  }

  Sass：
  .box
    display: block

  Stylus：
  .box
    display: block
    
    
二、嵌套语法 
  三者的嵌套语法都是一致的，甚至连引用父级选择器的标记 & 也相同。区别只是 Sass 和 Stylus 可以用没有大括号的方式书写。
  .a {
    &.b {
      color: red;
    }
  }
  
  
 三、选择器引用
  三者都支持用 & 在嵌套的规则集中引用上层的选择器，这可以是嵌套书写 CSS 时的「惯例」了。语法相同，但是逻辑上有些许差异。在一个选择器中用两次以上 & 且父选择器是一个列表时，Less 会对选择器进行排列组合，而 Sass 和 Stylus 不会这么做。
  除了 &，Sass 和 Stylus 更进一步，分别用 @at-root 和 / 符号作为嵌套时「根」规则集的选择器引用。
  <article class="post">
  <h1>我是一篇文章</h1>
  <section>
    <h1 class="section-title"><a href="#s1" class="section-link">#</a>我是章节标题</h1>
    <p>我只是一个<em>例子</em>。</p>
  </section>
  </article>
  
  .post
  section
    .section-title
      color #333
      /.post .section-link
        color #999
    /* other section styles */

  /* other post styles */
  css
  .post section .section-title {
    color: #333;
    }
    .post .section-link {
      color: #999;
   }
  
 四、变量
  Less：
  @red: #c00;
  strong {
    color: @red;
  }
  
  Sass：
  $red: #c00;
  strong {
    color: $red;
  }
  
  Stylus：
  red = #c00
  strong
    color: red
    
 五、变量作用域
 三种预处理器的变量作用域都是按嵌套的规则集划分，并且在当前规则集下找不到对应变量时会逐级向上查找，注意这个和原生 CSS 的逻辑是完全不同的。
 less 以最后定义的为准
 stylus sass 就近
 
 六、插值
 预处理器都有定义变量的功能，除了在最常见的属性值中使用，其他还有哪些地方能用变量来增强对样式的抽象、复用呢
 
 1）变量名插值
 Less 中支持 @@foo 的形式引用变量，即该变量的名字是由 @foo 的值决定的。
 
 2）选择器插值
 
 3）@import 语句插值
 
 4）属性名插值
 
 5）其他 @ 规则插值
 
 
 七、@import
 @import 对于模块化开发来说非常有帮助，但就这个功能来说，三种预处理器的行为各不相同
 
 
 八、混入
 混入（mixin）应该说是预处理器最精髓的功能之一了。它提供了 CSS 缺失的最关键的东西：样式层面的抽象。从语法上来说，三种预处理器的差异也比较大，这甚至会直接影响到我们的开发方式。
 
 Less 的混入有两种方式：
 直接在目标位置混入另一个类样式（输出已经确定，无法使用参数）；
 定义一个不输出的样式片段（可以输入参数），在目标位置输出。
 
 Sass 用 @mixin 和 @include 两个指令清楚地描述了语义
 
 九、将声明块作为混入参数
 如果说调用时想传入一组样式声明而非单个值，三种预处理器都提供了相应的功能，但实现方式各有不同。
 
 十、继承
 混入很好用，可也有问题：如果多个地方都混入同样的代码，会造成输出代码的多次重复。
 .message
  padding: 10px
  border: 1px solid #eee

.warning
  @extend .message
  color: #e2e21e
 
 
  
  
  
